body:
  shape: rectangle
  dynamic: unicycle_2nd
  goal_mode: center
  length: 0.2
  width: 0.1
  start_state: [0.0, 0.0, 0.785, 0.0, 0.0]
  goal_state: [1.0, 1.0, 0.785, 0.0, 0.0]
  control_bounds:
    - [-2.0,  2.0]
    - [-2.0,  2.0]

obstacles:
  - type: circle
    center: [0.5, 0.5]
    radius: 0.2
    margin: 0.01
  - type: circle
    center: [0.5, 1.1]
    radius: 0.05
    margin: 0.01
  - type: square
    center: [1.2, 0.37]
    size: 0.1
    margin: 0.01
  - type: square
    center: [1.1, 0.7]
    size: 0.2
    margin: 0.01
  - type: square
    center: [0.2, 0.9]
    size: 0.1
    margin: 0.01
  - type: square
    center: [0.4, 0.1]
    size: 0.1
    margin: 0.01
  - type: square
    center: [0.6, 0.1]
    size: 0.1
    margin: 0.01

solver:
  N: 80
  dt: 0.04
  use_slack: true
  slack_penalty: 50
  use_smooth:  false 
  smooth_weight: 0.2
  mode: l4casadi  # if l4casadi, learned sdf will be used
  initializer:
    - mode: rrt
      rrt_bounds:
        - [-0.0, -0.0]
        - [1.0, 1.0]
      step_size: 0.02
      max_iter: 5000
      margin: 0.0
    #- mode: linear #linear
  enforce_heading: false # enforce theta = theta_goal
  #type: ipopt #options: ipopt, sq

model:
  type: mlp  # options: siren, fourier, mlp
  hidden_dim: 128
  num_hidden_layers: 2
  activation_function: ReLU  # ignore for siren and fourier
  omega_0: 30                # used only for siren
  surface_loss_weight: 0
  eikonal_loss_weight: 0
